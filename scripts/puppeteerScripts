import { saveJSONReport } from "./saveScripts.js";
import path from "path";
import pti from "puppeteer-to-istanbul";

/**
 * Function to scrape all the scripts from the page and save data along with their loading strategy.
 *
 * @param {object} page The page object created by puppeteer
 * @param {string} outputFile The path of the output file
 */
export const getScrapedScripts = async ( browser, url, resDir ) => {
    const page = await browser.newPage();

    page.setDefaultTimeout(100000);
    await page.goto(url);

    // Get all script tags and their innerHTML (content)
    const scrapedScripts = await page.evaluate(() => {
        const scripts = Array.from(document.querySelectorAll('script'));

        return scripts.map((script, index) => {
            let key = script.getAttribute('src');
            key = null === key ? `inline` : `network-request`;
            let executionType =
                script.getAttribute('defer') !== null
                    ? script.getAttribute('async') !== null
                        ? 'defer-async'
                        : 'defer'
                    : 'sync';
            if (
                script.getAttribute('defer') === null &&
                script.getAttribute('async') !== null
            ) {
                executionType = 'async';
            }

            return {
                scriptSrc: script.getAttribute('src')
                    ? script.getAttribute('src')
                    : '-',
                scriptType: key,
                scriptInitiator: script.getAttribute('baseURI'),
                scriptContents: script.innerHTML ? script.innerHTML : '-',
                scriptExecutionType: executionType,
            };
        });
    });

    // Save scraped scripts to JSON file
    await saveJSONReport( scrapedScripts, `${resDir}scraped_scripts.json` );
};

// Generate Code coverage report
export const getCodeCoverageReport = async (browser, url, resDir) => {
    const page = await browser.newPage();
    page.setDefaultTimeout(100000);

    // Enable both JavaScript and CSS coverage
    await Promise.all([
        page.coverage.startJSCoverage(),
        page.coverage.startCSSCoverage(),
    ]);

    // Navigate to page
    await page.goto(url);

    // Disable both JavaScript and CSS coverage
    const [jsCoverage, cssCoverage] = await Promise.all([
        page.coverage.stopJSCoverage(),
        page.coverage.stopCSSCoverage(),
    ]);

    // saving JS code coverage report
    saveJSONReport(jsCoverage, `${resDir}jsCoverage-report.json`);

    // saving CSS code coverage report
    saveJSONReport(cssCoverage, `${resDir}cssCoverage-report.json`);

    const coverage = [
        ...addCodeSize(jsCoverage, "JS"),
        ...addCodeSize(cssCoverage, "CSS"),
    ];

    saveJSONReport(coverage, `${resDir}coverage-report.json`);

    // Generating coverage report using puppeteer-to-istanbul library
    pti.write([...jsCoverage, ...cssCoverage], {
        includeHostname: true,
        storagePath: "./.nyc_output",
    });
};

/**
 * Function to modify the code coverage report generated by puppeteer and add used and unused bytes size.
 *
 * @param {object} coverageReport Code coverage report generated using puppeteer
 * @param {string} reportType Report type to
 * @returns {object} modified code coverage report.
 */
const addCodeSize = (coverageReport, reportType) => {
    let totalBytes = 0;
    let usedBytes = 0;

    for (const entry of coverageReport) {
        totalBytes += entry.text.length;
        for (const range of entry.ranges)
            usedBytes += range.end - range.start - 1;

        entry.entryCoverage = {
            usedBytes: usedBytes,
            totalBytes: totalBytes,
            unusedBytes: totalBytes - usedBytes,
        };
        entry.resourceType = reportType;
    }

    return coverageReport;
};

export const getNetworkRequestList = async (browser, url, resDir) => {
    const networkData = []; // Array to store network request data
  
    try {
      const page = await browser.newPage();
      page.on('request', (request) => {
        const requestData = {
          url: request.url(),
          initiator: request.initiator(),
          resourceType: request.resourceType(),
          method: request.method(),
          headers: request.headers(), // Include request headers
        };
  
        networkData.push(requestData);
      });
  
      await page.goto(url);

        // saving JS code coverage report
        saveJSONReport(JSON.stringify(networkData, null, 2), `${resDir}network_data_puppeteer.json`);
    } catch (e) {
        console.log(`‚ùå Failed to generate network request list report`, e);
    }
  };
  